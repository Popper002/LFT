/* Esercizio 5 - Translator*/
 
 - Il nostro file sorgente è un file con estenzione .lft ,che verrà conpilato in un file con estenzione .j che sarà il nostro 
 linguaggio target ,ovvero un linguaggio mnemonico simil jvm ,in seguito attraverso il tool jasmine ,effettueremo la traduzione 
  1-1 in formato bytecode java ovvero .class. 
  Quindi possiamo dire che questa è la sequenza   .lft --> compilatore --> .j --> jasmise --> .class 
  per evocare jasmise usiamo la stringa di comando java -jar jasmine.jar file.j .

  Precisazioni comandi . 

  read (<idlist>) : comando che indica l'inserimento da parte dell'utente attraverso la tastiera di numeri non negativi ,
                    che vengono assegnati alle varibili contenute come argomento  in read 

   if(<bexpr>) <stat> end : istruzione simile all'if già visto in vari linguaggi ,però se <bexpr> è true , allora viene eseguita la label 
                             di stat , in caso contrario skippiamo all'istruzione successiva. 

    if(<bxepr>) <stat1> else <stat2> end : uguale alla precedente però in caso di false: eseguiamo la label <stat2> 

    while (<bexpr> ) <stat> : esecuzione ciclica della label (anche una singola istruzione ) stat finchè la condizione <bexpr> è vera. 

    esempio while : while( > x o ) { assign -x 1 to x ; print(x)}

    /* CLASSI DI SUPPORTO  */ 

    -OpCode : classe con enumazione di nomi mnemonici 
    -Istruction : rappresenta le singole istruzioni del linguaggio mnemonico 
        -ToJasmine : restituisce l'istruzione nel formato adeguato per l'assembler jasmin. 
    -Code Generator : Memorizza in una lista le istruzioni (oggetti di tipo istruction )generate durante la parsificazione    
                    - emit : aggiungono istruzioni o etichette di salto nel codice. 
                    - costanti header e footer definiscono l'inizio e la fine de codice generato dal traduttore , che poi tramite jasmine restituisce se rispetta o meno 
                        le condizioni di jasmine 
     - SymbolTable : tiene traccia degli identificatori attraverso una tabella di simboli. 
     
    <STACK JAVA > : Ogni frame è un metodo in esecuzione e contine : 
                    - argomenti e varibili locali (indirizzati a partire da 0).
                    -pila degli operandi (cresce / cala durante l'esecuzione del metodo )
                    - nei metodi non statici ,il primo argomento è il riferimento all'oggetto ricevente (this)


 ESEMPIO OPERAZIONI : 

•l’espressione: *(2 3 4)  ha valore  24  --> 2 x 3 --> 6 x 4
•l’espressione -*(2 4) 3  ha valore  5   --> 2 x 4 --> 8-3 = 5 
•l’espressione +(2 - 7 3)  ha valore  6  ( )
•l’espressione +(/ 10 2 3)  ha valore  8 
•l’espressione +(5 - 7 3 10)  ha valore 19


ESEMPIO IJVM WHILE :

start: 

iload x 
ldc 8 
istore x 
iload y 
if_icmpgt l1: 
goto l2: 
l1: 
    ldc 10 
    istore x
    ldc 1
    istore y
    goto while
l2:
    altro. 

---------------
ESEMPIO IJVM IF: 
l0:
    iload x 
    ldc 9
    istore x 
    iload y
    ldc 2
    istore y 
    if_icmple L1
     goto l2
L1:


int main()
{
    IF(CODE 1 > CODE 2 )
    {
        STATE =1 ; 
        STATE_2 = 2 ;
    }
    STATE = 0 ; 
}